name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  FLUTTER_VERSION: '3.32.7'

jobs:
  analyze:
    name: Analyze Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Analyze code
        run: flutter analyze

      - name: Run tests
        run: flutter test

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Enable web support
        run: flutter config --enable-web

      - name: Get dependencies
        run: flutter pub get

      - name: Build web (Debug for PR)
        if: github.event_name == 'pull_request'
        run: ./scripts/build_web.sh debug canvaskit "/"

      - name: Build web (Release for main/develop)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: ./scripts/build_web.sh release canvaskit "/"

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: artifacts/web/
          retention-days: 30

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Build Android APK (Debug for PR)
        if: github.event_name == 'pull_request'
        run: ./scripts/build_android.sh debug apk

      - name: Build Android APK (Release for main/develop)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: ./scripts/build_android.sh release apk

      - name: Build Android AAB (Release only)
        if: github.ref == 'refs/heads/main'
        run: ./scripts/build_android.sh release aab

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-build
          path: artifacts/android/
          retention-days: 30

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'

      - name: Get dependencies
        run: flutter pub get

      - name: Build iOS (Debug for PR)
        if: github.event_name == 'pull_request'
        run: ./scripts/build_ios.sh debug development

      - name: Build iOS (Release for main/develop)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: ./scripts/build_ios.sh release development

      - name: Upload iOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: artifacts/ios/
          retention-days: 30

  build-api:
    name: Build API Server
    runs-on: ubuntu-latest
    needs: analyze
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api-server/package-lock.json

      - name: Install API dependencies
        run: |
          cd api-server
          npm ci

      - name: Test API server
        run: |
          cd api-server
          npm test || echo "No tests configured"

      - name: Authenticate to Google Cloud
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'release'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'release'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for GCR
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'release'
        run: gcloud auth configure-docker

      - name: Build and push API Docker image
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'release'
        run: |
          cd api-server
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/epaper-api:${{ github.sha }} .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/epaper-api:${{ github.sha }}

  deploy-preview:
    name: Deploy Preview (Web)
    runs-on: ubuntu-latest
    needs: build-web
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: artifacts/web/

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to preview Cloud Run
        run: |
          # Deploy to Cloud Run with PR number in service name
          gcloud run deploy epaper-pr-${{ github.event.number }} \
            --source . \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 8080 \
            --tag pr-${{ github.event.number }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `https://epaper-pr-${prNumber}-[hash]-ew.a.run.app`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Preview Deployment Ready!**\n\nðŸ“± Web Preview: ${previewUrl}\n\n*This preview will be available until the PR is closed.*`
            });

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-web, build-android, build-ios, build-api]
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: artifacts/web/

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy API to staging
        run: |
          gcloud run deploy epaper-api-staging \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/epaper-api:${{ github.sha }} \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 3000 \
            --memory 512Mi \
            --cpu 1 \
            --min-instances 0 \
            --max-instances 5 \
            --set-env-vars "NODE_ENV=staging"

      - name: Deploy web to staging
        run: ./scripts/deploy.sh web staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-web, build-android, build-ios, build-api]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy API to production
        run: |
          gcloud run deploy epaper-api \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/epaper-api:${{ github.sha }} \
            --platform managed \
            --region europe-west1 \
            --allow-unauthenticated \
            --port 3000 \
            --memory 1Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 10 \
            --set-env-vars "NODE_ENV=production"

      - name: Deploy web to production
        run: ./scripts/deploy.sh web prod

      - name: Create GitHub Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/android/*
            artifacts/ios/*
            artifacts/web/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup-preview:
    name: Cleanup Preview Deployments
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Delete preview Cloud Run service
        run: |
          gcloud run services delete epaper-pr-${{ github.event.number }} \
            --region europe-west1 \
            --quiet || true
